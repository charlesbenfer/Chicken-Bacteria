}
vars_to_clean <- which(vars == TRUE)
any(is.na(Chick_Sal_Clean[,6]))
which(is.na(Chick_Sal_Clean))
which(is.na(Chick_Sal_Clean$QTR))
Chick_Sal_Clean$QTR[1864]
Chick_Sal_Clean <- Chick_Sal_Clean[-which(is.na(Chick_Sal_Clean$QTR)),]
for(i in 1:749){
vars[i] <- any(is.na(Chick_Sal_Clean[,i]))
}
vars <- rep(NA, 749)
for(i in 1:749){
vars[i] <- any(is.na(Chick_Sal_Clean[,i]))
}
vars <- rep(NA, ncol(Chick_Sal_Clean))
for(i in 1:ncol(Chick_Sal_Clean)){
vars[i] <- any(is.na(Chick_Sal_Clean[,i]))
}
vars_to_clean <- which(vars == TRUE)
Chick_Sal_Clean <- Chick_Sal_Clean[-which(is.na(Chick_Sal_Clean[,37])),]
vars <- rep(NA, ncol(Chick_Sal_Clean))
for(i in 1:ncol(Chick_Sal_Clean)){
vars[i] <- any(is.na(Chick_Sal_Clean[,i]))
}
vars_to_clean <- which(vars == TRUE)
Chick_Sal_Clean <- Chick_Sal_Clean[-which(is.na(Chick_Sal_Clean[,210])),]
vars <- rep(NA, ncol(Chick_Sal_Clean))
for(i in 1:ncol(Chick_Sal_Clean)){
vars[i] <- any(is.na(Chick_Sal_Clean[,i]))
}
vars_to_clean <- which(vars == TRUE)
Chick_Sal_Clean <- Chick_Sal_Clean[-which(is.na(Chick_Sal_Clean[,306])),]
vars <- rep(NA, ncol(Chick_Sal_Clean))
for(i in 1:ncol(Chick_Sal_Clean)){
vars[i] <- any(is.na(Chick_Sal_Clean[,i]))
}
vars_to_clean <- which(vars == TRUE)
set.seed(500)
ind <- sample(2,nrow(Chick_Sal), replace = TRUE, prob = c(.7,.3))
train <- Chick_Sal[ind==1,]
test<- Chick_Sal[ind==2,]
forest <- randomForest(as.factor(MIC_TET)~FINAL_ID_SEROTYPE,data = train, proximity = TRUE)
print(forest)
set.seed(500)
ind <- sample(2,nrow(Chick_Sal_Clean), replace = TRUE, prob = c(.7,.3))
train <- Chick_Sal_Clean[ind==1,]
test<- Chick_Sal_Clean[ind==2,]
forest <- randomForest(as.factor(MIC_TET)~FINAL_ID_SEROTYPE,data = train, proximity = TRUE)
print(forest)
Chick_Sal_ARA_mgKg.csv <- read.csv("C:/Users/charl/Downloads/Chick_Sal_ARA_mgKg.csv.csv", row.names=1)
View(Chick_Sal_ARA_mgKg.csv)
Chick_Sal_ARA_mgKg <- Chick_Sal_ARA_mgKg.csv[,-c(14,17,20,66,39,65,47,7,10,51)]
levels(Chick_Sal_ARA_mgKg[,20])
View(Chick_Sal_ARA_mgKg)
Chick_Sal_ARA_mgKg[,20] <- as.factor(Chick_Sal_ARA_mgKg[,20])
levels(Chick_Sal_ARA_mgKg[,20])
Chick_Sal_ARA_mgKg[,25] <- as.factor(Chick_Sal_ARA_mgKg[,25])
levels(Chick_Sal_ARA_mgKg[,25])
Chick_Sal_ARA_mgKg[,25]<-droplevels(Chick_Sal_ARA_mgKg[,25])
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,20] == '<= 4'){Chick_Sal_ARA_mgKg[i,20] <- '<=4'}
if(Chick_Sal_ARA_mgKg[i,20] == '> 32'){Chick_Sal_ARA_mgKg[i,20] <- '>32'}
}
Chick_Sal_ARA_mgKg[,25]<-droplevels(Chick_Sal_ARA_mgKg[,25])
levels(Chick_Sal_ARA_mgKg[,25])
Chick_Sal_ARA_mgKg[,25]<-droplevels(Chick_Sal_ARA_mgKg[,25])
levels(Chick_Sal_ARA_mgKg[,25])
rf_TET_part <- train(as.formula(paste(colnames(train)[20], "~",
paste(colnames(train)[40:56], collapse = "+"),
sep = "")), data = train, method = 'ranger')
library(glmnet)
library(caret)
library(ranger)
library(tidyverse)
library(e1071)
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,25] == '<= 4'){Chick_Sal_ARA_mgKg[i,25] <- '<=4'}
if(Chick_Sal_ARA_mgKg[i,25] == '> 32'){Chick_Sal_ARA_mgKg[i,25] <- '>32'}
}
levels(Chick_Sal_ARA_mgKg[,25])
Chick_Sal_ARA_mgKg[,25]<-droplevels(Chick_Sal_ARA_mgKg[,25])
levels(Chick_Sal_ARA_mgKg[,25])
ind <- sample(2, nrow(Chick_Sal_ARA_mgKg), replace = T,prob = c(.7,.3))
train <- Chick_Sal_ARA_mgKg[ind==1,]
test <- Chick_Sal_ARA_mgKg[ind==2,]
rf_TET_part <- train(as.formula(paste(colnames(train)[20], "~",
paste(colnames(train)[40:56], collapse = "+"),
sep = "")), data = train, method = 'ranger')
rf_TET_part <- train(as.formula(paste(colnames(train)[25], "~",
paste(colnames(train)[40:56], collapse = "+"),
sep = "")), data = train, method = 'ranger')
levels(train[,25])
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,25] == '<=4' || Chick_Sal_ARA_mgKg[i,25] == '8'){Chick_Sal_ARA_mgKg[i,25]<- '<=8'}
if(Chick_Sal_ARA_mgKg[i,25] == '16' || Chick_Sal_ARA_mgKg[i,25] == '32'|| Chick_Sal_ARA_mgKg[i,25] == '>32'){Chick_Sal_ARA_mgKg[i,20] <- '>=16'}
}
print(rf_TET_part)
?train
varImp(rf_TET_part)
varImp(rf_TET_part, scale=F)
?train
library(glmnet)
library(caret)
library(ranger)
library(tidyverse)
library(e1071)
rf_TET_part <- train(as.formula(paste(colnames(train)[25], "~",
paste(colnames(train)[40:56], collapse = "+"),
sep = "")), data = train, method = 'ranger', importance = T)
rf_TET_part <- train(as.formula(paste(colnames(train)[25], "~",
paste(colnames(train)[46:58], collapse = "+"),
sep = "")), data = train, method = 'ranger', importance = T)
rf_TET_part <- train(as.formula(paste(colnames(train)[25], "~",
paste(colnames(train)[46:58], collapse = "+"),
sep = "")), data = train, method = 'ranger')
rf_TET_part$varImp
rf_TET_part <- train(as.formula(paste(colnames(train)[25], "~",
paste(colnames(train)[46:58], collapse = "+"),
sep = "")), data = train, method = 'ranger', importance = T)
importance(rf_TET_part)
rf_TET_part <- train(as.formula(paste(colnames(train)[25], "~",
paste(colnames(train)[46:58], collapse = "+"),
sep = "")), data = train, method = 'ranger')
library(caret)
library(ranger)
library(e1071)
library(randomForest)
library(mlbench)
Chick_Sal_ARA_mgKg <- read.csv("Chick_Sal_ARA_mgKg.csv", row.names=1)
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,3] == 'ALBERTA'){Chick_Sal_ARA_mgKg[i,3] <- 'Alberta'}
if(Chick_Sal_ARA_mgKg[i,3] == 'BRITISH COLUMBIA'){Chick_Sal_ARA_mgKg[i,3] <- 'British Columbia'}
if(Chick_Sal_ARA_mgKg[i,3] == 'ONTARIO'){Chick_Sal_ARA_mgKg[i,3] <- 'Ontario'}
if(Chick_Sal_ARA_mgKg[i,3] == 'QUEBEC'){Chick_Sal_ARA_mgKg[i,3] <- 'Quebec'}
if(Chick_Sal_ARA_mgKg[i,3] == 'SASKATCHEWAN'){Chick_Sal_ARA_mgKg[i,3] <- 'Saskatchewan'}
}
library(caret)
library(ranger)
library(e1071)
library(randomForest)
library(mlbench)
Chick_Sal_ARA_mgKg <- read.csv("Chick_Sal_ARA_mgKg.csv", row.names=1)
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,3] == 'ALBERTA'){Chick_Sal_ARA_mgKg[i,3] <- 'Alberta'}
if(Chick_Sal_ARA_mgKg[i,3] == 'BRITISH COLUMBIA'){Chick_Sal_ARA_mgKg[i,3] <- 'British Columbia'}
if(Chick_Sal_ARA_mgKg[i,3] == 'ONTARIO'){Chick_Sal_ARA_mgKg[i,3] <- 'Ontario'}
if(Chick_Sal_ARA_mgKg[i,3] == 'QUEBEC'){Chick_Sal_ARA_mgKg[i,3] <- 'Quebec'}
if(Chick_Sal_ARA_mgKg[i,3] == 'SASKATCHEWAN'){Chick_Sal_ARA_mgKg[i,3] <- 'Saskatchewan'}
}
colnames(Chick_Sal_ARA_mgKg)[c(14,17,20,66,39,65,47,7,10,51)]
Chick_Sal_ARA_mgKg <- Chick_Sal_ARA_mgKg[,-c(14,17,20,66,39,65,47,7,10,51)]
#Changing the units for MIC_TET, let's start by narrowing down to 2 classes. <=8 vs >=16
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,25] == '<= 4'||Chick_Sal_ARA_mgKg[i,25] =='<=4'||Chick_Sal_ARA_mgKg[i,25] =='8'){
Chick_Sal_ARA_mgKg[i,25] <- '<=8'
}
else Chick_Sal_ARA_mgKg[i,25] <- '>=16'
}
Chick_Sal_ARA_mgKg[,25] <- as.factor(Chick_Sal_ARA_mgKg[,25])
levels(Chick_Sal_ARA_mgKg[,25])
ind <- sample(2, nrow(Chick_Sal_ARA_mgKg), replace = T,prob = c(.7,.3))
train_TET <- Chick_Sal_ARA_mgKg[ind==1,]
test_TET <- Chick_Sal_ARA_mgKg[ind==2,]
rf_TET_2 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg)[25],
"~",paste(colnames(Chick_Sal_ARA_mgKg)[c(1:24,26:41,43:56)],
collapse = "+"),sep = "")),
data = train_TET, ntree=1000,keep.forest=T,importance=T)
importance(rf_TET_2,type=1)
varImpPlot(rf_TET_2)
rf_TET_2$confusion
#Prediction with generated random forest
TET_2_preds <- predict(rf_TET_2, newdata = test_TET)
confusionMatrix(test_TET[,25],TET_2_preds)
Chick_Sal_ARA_mgKg_TET <- read.csv("Chick_Sal_ARA_mgKg.csv", row.names=1)
for(i in 1:nrow(Chick_Sal_ARA_mgKg_TET)){
if(Chick_Sal_ARA_mgKg_TET[i,3] == 'ALBERTA'){Chick_Sal_ARA_mgKg_TET[i,3] <- 'Alberta'}
if(Chick_Sal_ARA_mgKg_TET[i,3] == 'BRITISH COLUMBIA'){Chick_Sal_ARA_mgKg_TET[i,3] <- 'British Columbia'}
if(Chick_Sal_ARA_mgKg_TET[i,3] == 'ONTARIO'){Chick_Sal_ARA_mgKg_TET[i,3] <- 'Ontario'}
if(Chick_Sal_ARA_mgKg_TET[i,3] == 'QUEBEC'){Chick_Sal_ARA_mgKg_TET[i,3] <- 'Quebec'}
if(Chick_Sal_ARA_mgKg_TET[i,3] == 'SASKATCHEWAN'){Chick_Sal_ARA_mgKg_TET[i,3] <- 'Saskatchewan'}
}
colnames(Chick_Sal_ARA_mgKg_TET)[c(14,17,20,66,39,65,47,7,10,51)]
Chick_Sal_ARA_mgKg_TET <- Chick_Sal_ARA_mgKg_TET[,-c(14,17,20,66,39,65,47,7,10,51)]
#Keep almost all of the original labels for TET, run the RF
Chick_Sal_ARA_mgKg_TET[,25]<-as.factor(Chick_Sal_ARA_mgKg_TET[,25])
levels(Chick_Sal_ARA_mgKg_TET[,25])
Chick_Sal_ARA_mgKg_TET[,25]<-as.character(Chick_Sal_ARA_mgKg_TET[,25])
for(i in 1:nrow(Chick_Sal_ARA_mgKg_TET)){
if(Chick_Sal_ARA_mgKg_TET[i,25]=='<= 4'){Chick_Sal_ARA_mgKg_TET[i,25]<-'<=4'}
if(Chick_Sal_ARA_mgKg_TET[i,25]=='> 32'||Chick_Sal_ARA_mgKg_TET[i,25]=='>32'
||Chick_Sal_ARA_mgKg_TET[i,25]=='32'){Chick_Sal_ARA_mgKg_TET[i,25]<-'>=32'}
}
Chick_Sal_ARA_mgKg_TET[,25]<-as.factor(Chick_Sal_ARA_mgKg_TET[,25])
levels(Chick_Sal_ARA_mgKg_TET[,25])
ind <- sample(2, nrow(Chick_Sal_ARA_mgKg_TET), replace = T,prob = c(.7,.3))
train_TET_4 <- Chick_Sal_ARA_mgKg_TET[ind==1,]
test_TET_4 <- Chick_Sal_ARA_mgKg_TET[ind==2,]
rf_TET_4 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg_TET)[25],
"~",paste(colnames(Chick_Sal_ARA_mgKg_TET)[c(1:24,26:41,43:56)],
collapse = "+"),sep = "")),
data = train_TET_4, ntree=1000,keep.forest=T,importance=T)
ind <- sample(2, nrow(Chick_Sal_ARA_mgKg_TET), replace = T,prob = c(.7,.3))
train_TET_4 <- Chick_Sal_ARA_mgKg_TET[ind==1,]
test_TET_4 <- Chick_Sal_ARA_mgKg_TET[ind==2,]
rf_TET_4 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg_TET)[25],
"~",paste(colnames(Chick_Sal_ARA_mgKg_TET)[c(1:24,26:41,43:56)],
collapse = "+"),sep = "")),
data = train_TET_4, ntree=1000,keep.forest=T,importance=T)
ind <- sample(2, nrow(Chick_Sal_ARA_mgKg_TET), replace = T,prob = c(.7,.3))
train_TET_4 <- Chick_Sal_ARA_mgKg_TET[ind==1,]
test_TET_4 <- Chick_Sal_ARA_mgKg_TET[ind==2,]
rf_TET_4 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg_TET)[25],
"~",paste(colnames(Chick_Sal_ARA_mgKg_TET)[c(1:24,26:41,43:56)],
collapse = "+"),sep = "")),
data = train_TET_4, ntree=1000,keep.forest=T,importance=T)
importance(rf_TET_4,type=1)
varImpPlot(rf_TET_4)
rf_TET_4$confusion
#Prediction with generated random forest
TET_4_preds <- predict(rf_TET_4, newdata = test_TET_4)
confusionMatrix(test_TET_4[,25],TET_4_preds)
ind <- sample(2, nrow(Chick_Sal_ARA_mgKg), replace = T,prob = c(.7,.3))
train <- Chick_Sal_ARA_mgKg[ind==1,]
test <- Chick_Sal_ARA_mgKg[ind==2,]
#Train a RF for MIC_SSS on the train data based on columns 40-56
rf_SSS_2 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg)[22],
"~",paste(colnames(Chick_Sal_ARA_mgKg)[c(1:21,23:39,41:56)],
collapse = "+"),sep = "")),
data = train, ntree=1000,keep.forest=T,importance=T)
Chick_Sal_ARA_mgKg <- read.csv("Chick_Sal_ARA_mgKg.csv", row.names=1)
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,3] == 'ALBERTA'){Chick_Sal_ARA_mgKg[i,3] <- 'Alberta'}
if(Chick_Sal_ARA_mgKg[i,3] == 'BRITISH COLUMBIA'){Chick_Sal_ARA_mgKg[i,3] <- 'British Columbia'}
if(Chick_Sal_ARA_mgKg[i,3] == 'ONTARIO'){Chick_Sal_ARA_mgKg[i,3] <- 'Ontario'}
if(Chick_Sal_ARA_mgKg[i,3] == 'QUEBEC'){Chick_Sal_ARA_mgKg[i,3] <- 'Quebec'}
if(Chick_Sal_ARA_mgKg[i,3] == 'SASKATCHEWAN'){Chick_Sal_ARA_mgKg[i,3] <- 'Saskatchewan'}
}
colnames(Chick_Sal_ARA_mgKg)[c(14,17,20,66,39,65,47,7,10,51)]
Chick_Sal_ARA_mgKg <- Chick_Sal_ARA_mgKg[,-c(14,17,20,66,39,65,47,7,10,51)]
#Changing the units for MIC_TET, let's start by narrowing down to 2 classes. <=8 vs >=16
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,25] == '<= 4'||Chick_Sal_ARA_mgKg[i,25] =='<=4'||Chick_Sal_ARA_mgKg[i,25] =='8'){
Chick_Sal_ARA_mgKg[i,25] <- '<=8'
}
else Chick_Sal_ARA_mgKg[i,25] <- '>=16'
}
Chick_Sal_ARA_mgKg[,25] <- as.factor(Chick_Sal_ARA_mgKg[,25])
levels(Chick_Sal_ARA_mgKg[,25])
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,22] == '<= 16' || Chick_Sal_ARA_mgKg[i,22] == '<=16'|| Chick_Sal_ARA_mgKg[i,22] == '32'
|| Chick_Sal_ARA_mgKg[i,22] == '64'){Chick_Sal_ARA_mgKg[i,22] <- '<=64'}
else Chick_Sal_ARA_mgKg[i,22] <- '>=128'
}
Chick_Sal_ARA_mgKg[,22] <- as.factor(Chick_Sal_ARA_mgKg[,22])
levels(Chick_Sal_ARA_mgKg[,22])
ind <- sample(2, nrow(Chick_Sal_ARA_mgKg), replace = T,prob = c(.7,.3))
train <- Chick_Sal_ARA_mgKg[ind==1,]
test <- Chick_Sal_ARA_mgKg[ind==2,]
#Train a RF for MIC_SSS on the train data based on columns 40-56
rf_SSS_2 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg)[22],
"~",paste(colnames(Chick_Sal_ARA_mgKg)[c(1:21,23:39,41:56)],
collapse = "+"),sep = "")),
data = train, ntree=1000,keep.forest=T,importance=T)
importance(rf_SSS,type=1)
importance(rf_SSS_2,type=1)
varImpPlot(rf_SSS_2)
rf_SSS_2$confusion
#Prediction with generated random forest
SSS_preds_2 <- predict(rf_SSS_2, newdata = test)
confusionMatrix(test[,22],SSS_preds_2)
Chick_Sal_ARA_mgKg_SSS <- read.csv("Chick_Sal_ARA_mgKg.csv", row.names=1)
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,3] == 'ALBERTA'){Chick_Sal_ARA_mgKg[i,3] <- 'Alberta'}
if(Chick_Sal_ARA_mgKg[i,3] == 'BRITISH COLUMBIA'){Chick_Sal_ARA_mgKg[i,3] <- 'British Columbia'}
if(Chick_Sal_ARA_mgKg[i,3] == 'ONTARIO'){Chick_Sal_ARA_mgKg[i,3] <- 'Ontario'}
if(Chick_Sal_ARA_mgKg[i,3] == 'QUEBEC'){Chick_Sal_ARA_mgKg[i,3] <- 'Quebec'}
if(Chick_Sal_ARA_mgKg[i,3] == 'SASKATCHEWAN'){Chick_Sal_ARA_mgKg[i,3] <- 'Saskatchewan'}
}
colnames(Chick_Sal_ARA_mgKg_SSS)[c(14,17,20,66,39,65,47,7,10,51)]
Chick_Sal_ARA_mgKg_SSS <- Chick_Sal_ARA_mgKg_SSS[,-c(14,17,20,66,39,65,47,7,10,51)]
for(i in 1:nrow(Chick_Sal_ARA_mgKg_SSS)){
if(Chick_Sal_ARA_mgKg_SSS[i,22] == '<= 16' || Chick_Sal_ARA_mgKg_SSS[i,22] == '<=16'){
Chick_Sal_ARA_mgKg_SSS[i,22] <- '<=16'
}
if(Chick_Sal_ARA_mgKg_SSS[i,22] == '> 256' ||Chick_Sal_ARA_mgKg_SSS[i,22] == '>256'
||Chick_Sal_ARA_mgKg_SSS[i,22] == '256'){Chick_Sal_ARA_mgKg_SSS[i,22] <- '>=256'}
}
Chick_Sal_ARA_mgKg_SSS[,22]<-as.factor(Chick_Sal_ARA_mgKg_SSS[,22])
levels(Chick_Sal_ARA_mgKg_SSS[,22])
ind <- sample(2, nrow(Chick_Sal_ARA_mgKg_SSS), replace = T,prob = c(.7,.3))
train_SSS <- Chick_Sal_ARA_mgKg_SSS[ind==1,]
test_SSS <- Chick_Sal_ARA_mgKg_SSS[ind==2,]
#Train a RF for MIC_SSS on the train data based on columns 40-56
rf_SSS_5 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg_SSS)[22],
"~",paste(colnames(Chick_Sal_ARA_mgKg_SSS)[c(1:21,23:39,41:56)],
collapse = "+"),sep = "")),
data = train, ntree=1000,keep.forest=T,importance=T)
importance(rf_SSS_5,type=1)
varImpPlot(rf_SSS_5)
rf_SSS_5$confusion
levels(Chick_Sal_ARA_mgKg_SSS[,22])
ind <- sample(2, nrow(Chick_Sal_ARA_mgKg_SSS), replace = T,prob = c(.7,.3))
train_SSS <- Chick_Sal_ARA_mgKg_SSS[ind==1,]
test_SSS <- Chick_Sal_ARA_mgKg_SSS[ind==2,]
#Train a RF for MIC_SSS on the train data based on columns 40-56
rf_SSS_5 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg_SSS)[22],
"~",paste(colnames(Chick_Sal_ARA_mgKg_SSS)[c(1:21,23:39,41:56)],
collapse = "+"),sep = "")),
data = train, ntree=1000,keep.forest=T,importance=T)
importance(rf_SSS_5,type=1)
varImpPlot(rf_SSS_5)
rf_SSS_5$confusion
Chick_Sal_ARA_mgKg_SSS <- read.csv("Chick_Sal_ARA_mgKg.csv", row.names=1)
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,3] == 'ALBERTA'){Chick_Sal_ARA_mgKg[i,3] <- 'Alberta'}
if(Chick_Sal_ARA_mgKg[i,3] == 'BRITISH COLUMBIA'){Chick_Sal_ARA_mgKg[i,3] <- 'British Columbia'}
if(Chick_Sal_ARA_mgKg[i,3] == 'ONTARIO'){Chick_Sal_ARA_mgKg[i,3] <- 'Ontario'}
if(Chick_Sal_ARA_mgKg[i,3] == 'QUEBEC'){Chick_Sal_ARA_mgKg[i,3] <- 'Quebec'}
if(Chick_Sal_ARA_mgKg[i,3] == 'SASKATCHEWAN'){Chick_Sal_ARA_mgKg[i,3] <- 'Saskatchewan'}
}
colnames(Chick_Sal_ARA_mgKg_SSS)[c(14,17,20,66,39,65,47,7,10,51)]
Chick_Sal_ARA_mgKg_SSS <- Chick_Sal_ARA_mgKg_SSS[,-c(14,17,20,66,39,65,47,7,10,51)]
for(i in 1:nrow(Chick_Sal_ARA_mgKg_SSS)){
if(Chick_Sal_ARA_mgKg_SSS[i,22] == '<= 16' || Chick_Sal_ARA_mgKg_SSS[i,22] == '<=16'){
Chick_Sal_ARA_mgKg_SSS[i,22] <- '<=16'
}
if(Chick_Sal_ARA_mgKg_SSS[i,22] == '> 256' ||Chick_Sal_ARA_mgKg_SSS[i,22] == '>256'
||Chick_Sal_ARA_mgKg_SSS[i,22] == '256'){Chick_Sal_ARA_mgKg_SSS[i,22] <- '>=256'}
}
Chick_Sal_ARA_mgKg_SSS[,22]<-as.factor(Chick_Sal_ARA_mgKg_SSS[,22])
levels(Chick_Sal_ARA_mgKg_SSS[,22])
ind <- sample(2, nrow(Chick_Sal_ARA_mgKg_SSS), replace = T,prob = c(.7,.3))
train_SSS <- Chick_Sal_ARA_mgKg_SSS[ind==1,]
test_SSS <- Chick_Sal_ARA_mgKg_SSS[ind==2,]
#Train a RF for MIC_SSS on the train data based on columns 40-56
rf_SSS_5 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg_SSS)[22],
"~",paste(colnames(Chick_Sal_ARA_mgKg_SSS)[c(1:21,23:39,41:56)],
collapse = "+"),sep = "")),
data = train_SSS, ntree=1000,keep.forest=T,importance=T)
importance(rf_SSS_5,type=1)
varImpPlot(rf_SSS_5)
rf_SSS_5$confusion
#Prediction with generated random forest
SSS_preds_5 <- predict(rf_SSS_5, newdata = test_SSS)
confusionMatrix(test_SSS[,22],SSS_preds_5)
ind <- sample(2, nrow(Chick_Sal_ARA_mgKg_STR), replace = T,prob = c(.7,.3))
train <- Chick_Sal_ARA_mgKg_STR[ind==1,]
test <- Chick_Sal_ARA_mgKg_STR[ind==2,]
Chick_Sal_ARA_mgKg_STR <- Chick_Sal_ARA_mgKg[-which(Chick_Sal_ARA_mgKg[,23] == ''),]
Chick_Sal_ARA_mgKg_STR[,23] <- as.factor(Chick_Sal_ARA_mgKg_STR[,23])
levels(Chick_Sal_ARA_mgKg_STR[,23])
Chick_Sal_ARA_mgKg_STR[,23] <- as.character(Chick_Sal_ARA_mgKg_STR[,23])
for(i in 1:nrow(Chick_Sal_ARA_mgKg_STR)){
if(Chick_Sal_ARA_mgKg_STR[i,23]=='32'){Chick_Sal_ARA_mgKg_STR[i,23]<-'<=32'}
}
Chick_Sal_ARA_mgKg_STR[,23] <- as.factor(Chick_Sal_ARA_mgKg_STR[,23])
levels(Chick_Sal_ARA_mgKg_STR[,23])
ind <- sample(2, nrow(Chick_Sal_ARA_mgKg_STR), replace = T,prob = c(.7,.3))
train <- Chick_Sal_ARA_mgKg_STR[ind==1,]
test <- Chick_Sal_ARA_mgKg_STR[ind==2,]
#Train a RF for MIC_SSS on the train data based on columns 40-56
rf_STR <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg_STR)[23],
"~",paste(colnames(Chick_Sal_ARA_mgKg)[c(1:22,24:56)],
collapse = "+"),sep = "")),
data = train, ntree=1000,keep.forest=T,importance=T)
importance(rf_STR,type=1)
varImpPlot(rf_STR)
rf_STR$confusion
#Prediction with generated random forest
STR_preds <- predict(rf_STR, newdata = test)
confusionMatrix(test[,23],STR_preds)
install.packages('fastshap')
library(fastshap)
pfun <- function(object, newdata) {  # prediction wrapper
unname(predict(object, data = newdata)$predictions[, "yes"])
}
rand_row <- sample(1:nrow(Chick_Sal_ARA_mgKg),size=1)
rand_pred <- Chick_Sal_ARA_mgKg[rand_row,]
pfun(MIC_TET, newdata = rand_pred)
pfun(rf_TET_2, newdata = rand_pred)
predict(rf_TET_2,rand_pred)
predict(rf_TET_4,rand_pred)
ind <- sample(2, nrow(Chick_Sal_ARA_mgKg), replace = T,prob = c(.7,.3))
train_TET <- Chick_Sal_ARA_mgKg[ind==1,]
test_TET <- Chick_Sal_ARA_mgKg[ind==2,]
rf_TET_2 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg)[25],
"~",paste(colnames(Chick_Sal_ARA_mgKg)[c(1:24,26:41,43:56)],
collapse = "+"),sep = "")),
data = train_TET, ntree=1000,keep.forest=T,importance=T)
Chick_Sal_ARA_mgKg <- read.csv("Chick_Sal_ARA_mgKg.csv", row.names=1)
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,3] == 'ALBERTA'){Chick_Sal_ARA_mgKg[i,3] <- 'Alberta'}
if(Chick_Sal_ARA_mgKg[i,3] == 'BRITISH COLUMBIA'){Chick_Sal_ARA_mgKg[i,3] <- 'British Columbia'}
if(Chick_Sal_ARA_mgKg[i,3] == 'ONTARIO'){Chick_Sal_ARA_mgKg[i,3] <- 'Ontario'}
if(Chick_Sal_ARA_mgKg[i,3] == 'QUEBEC'){Chick_Sal_ARA_mgKg[i,3] <- 'Quebec'}
if(Chick_Sal_ARA_mgKg[i,3] == 'SASKATCHEWAN'){Chick_Sal_ARA_mgKg[i,3] <- 'Saskatchewan'}
}
colnames(Chick_Sal_ARA_mgKg)[c(14,17,20,66,39,65,47,7,10,51)]
Chick_Sal_ARA_mgKg <- Chick_Sal_ARA_mgKg[,-c(14,17,20,66,39,65,47,7,10,51)]
#Changing the units for MIC_TET, let's start by narrowing down to 2 classes. <=8 vs >=16
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,25] == '<= 4'||Chick_Sal_ARA_mgKg[i,25] =='<=4'||Chick_Sal_ARA_mgKg[i,25] =='8'){
Chick_Sal_ARA_mgKg[i,25] <- '<=8'
}
else Chick_Sal_ARA_mgKg[i,25] <- '>=16'
}
Chick_Sal_ARA_mgKg[,25] <- as.factor(Chick_Sal_ARA_mgKg[,25])
levels(Chick_Sal_ARA_mgKg[,25])
ind <- sample(2, nrow(Chick_Sal_ARA_mgKg), replace = T,prob = c(.7,.3))
train_TET <- Chick_Sal_ARA_mgKg[ind==1,]
test_TET <- Chick_Sal_ARA_mgKg[ind==2,]
rf_TET_2 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg)[25],
"~",paste(colnames(Chick_Sal_ARA_mgKg)[c(1:24,26:41,43:56)],
collapse = "+"),sep = "")),
data = train_TET, ntree=1000,keep.forest=T,importance=T)
predict(rf_TET_2,rand_pred)
rand_pred <- Chick_Sal_ARA_mgKg[rand_row,]
predict(rf_TET_2,rand_pred)
pred <- predict(rf_TET_2,rand_pred)
pred <- predict(rf_TET_2,rand_pred)$predictions
pred <- pfun(rf_TET_2,rand_pred)
pfun <- function(object, newdata) {  # prediction wrapper
unname(predict(object, data = newdata))
}
pred <- pfun(rf_TET_2,rand_pred)
rand_row <- sample(1:nrow(Chick_Sal_ARA_mgKg),size=1)
rand_pred <- Chick_Sal_ARA_mgKg[rand_row,]
pred <- pfun(rf_TET_2,rand_pred)
View(pred)
pred
sample(1:nrow(Chick_Sal_ARA_mgKg),size=1)
rand_row <- sample(1:nrow(Chick_Sal_ARA_mgKg),size=1)
rand_pred <- Chick_Sal_ARA_mgKg[rand_row,]
rand_pred
pred <- pfun(rf_TET_2,rand_pred)
pred
?`fastshap-package`
?predict.randomForest
pred <- pfun(rf_TET_2,rand_pred, type=prob)
pfun <- function(object, newdata) {  # prediction wrapper
unname(predict(object, data = newdata, type=prob))
}
rand_row <- sample(1:nrow(Chick_Sal_ARA_mgKg),size=1)
rand_pred <- Chick_Sal_ARA_mgKg[rand_row,]
pred <- pfun(rf_TET_2,rand_pred
pred <- pfun(rf_TET_2,rand_pred)
pred <- pfun(rf_TET_2,rand_pred)
pfun <- function(object, newdata) {  # prediction wrapper
predict(object, data = newdata, type=prob)
}
rand_row <- sample(1:nrow(Chick_Sal_ARA_mgKg),size=1)
rand_pred <- Chick_Sal_ARA_mgKg[rand_row,]
pred <- pfun(rf_TET_2,rand_pred)
pfun <- function(object, newdata) {  # prediction wrapper
predict(object, data = newdata, type='prob')
}
rand_row <- sample(1:nrow(Chick_Sal_ARA_mgKg),size=1)
rand_pred <- Chick_Sal_ARA_mgKg[rand_row,]
pred <- pfun(rf_TET_2,rand_pred)
pred
pfun <- function(object, newdata) {  # prediction wrapper
predict(object, data = newdata, type='prob', predict.all=F)
}
rand_row <- sample(1:nrow(Chick_Sal_ARA_mgKg),size=1)
rand_pred <- Chick_Sal_ARA_mgKg[rand_row,]
pred <- pfun(rf_TET_2,rand_pred)
pred
pfun <- function(object, newdata) {  # prediction wrapper
predict(object, newdata, type='prob', predict.all=F)
}
rand_row <- sample(1:nrow(Chick_Sal_ARA_mgKg),size=1)
rand_pred <- Chick_Sal_ARA_mgKg[rand_row,]
pred <- pfun(rf_TET_2,rand_pred)
pred
pred <- pfun(rf_TET_2,rand_pred)[2,1]
pred <- pfun(rf_TET_2,rand_pred)[1,1]
pred
X <- subset(Chick_Sal_ARA_mgKg, select = -MIC_TET)
shaps <- explain(rfo, X = X, pred_wrapper = pfun,
newdata = rand_pred,
nsim = 1000)
shaps <- explain(rf_TET_2, X = X, pred_wrapper = pfun,
newdata = rand_pred,
nsim = 1000)
shaps <- explain(rf_TET_2, X = X, pred_wrapper = pfun,
newdata = rand_pred,
nsim = 1000)
X
library(tibble)
shaps <- explain(rf_TET_2, X = X, pred_wrapper = pfun, nsim = 100, adjust = TRUE,
shap_only = FALSE)
importance(rf_TET_2,type=1)
varImpPlot(rf_TET_2)
View(Chick_Sal_ARA_mgKg)
rf_TET_2$confusion
rf_TET_4$confusion
rf_STR$confusion
varImpPlot(rf_STR)
pfun <- function(object, newdata) {  # prediction wrapper
predict(object, newdata, type='prob', predict.all=F)
}
rand_row <- sample(1:nrow(Chick_Sal_ARA_mgKg),size=1)
rand_pred <- Chick_Sal_ARA_mgKg[rand_row,]
pred <- pfun(rf_TET_2,rand_pred)[1,1]
X <- subset(Chick_Sal_ARA_mgKg, select = -MIC_TET)
shaps <- explain(rf_TET_2, X = X, pred_wrapper = pfun, nsim = 100, adjust = TRUE,
shap_only = FALSE)
system.time({
shaps <- explain(rf_TET_2, X = X, pred_wrapper = pfun, nsim = 100,
adjust = TRUE, shap_only = FALSE)
})
gc()
