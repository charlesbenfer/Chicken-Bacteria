shaps <- explain(rf_TET_2, X = X, pred_wrapper = pfun,
newdata = rand_pred,
nsim = 1000)
shaps <- explain(rf_TET_2, X = X, pred_wrapper = pfun,
newdata = rand_pred,
nsim = 1000)
X
library(tibble)
shaps <- explain(rf_TET_2, X = X, pred_wrapper = pfun, nsim = 100, adjust = TRUE,
shap_only = FALSE)
importance(rf_TET_2,type=1)
varImpPlot(rf_TET_2)
View(Chick_Sal_ARA_mgKg)
rf_TET_2$confusion
rf_TET_4$confusion
rf_STR$confusion
varImpPlot(rf_STR)
pfun <- function(object, newdata) {  # prediction wrapper
predict(object, newdata, type='prob', predict.all=F)
}
rand_row <- sample(1:nrow(Chick_Sal_ARA_mgKg),size=1)
rand_pred <- Chick_Sal_ARA_mgKg[rand_row,]
pred <- pfun(rf_TET_2,rand_pred)[1,1]
X <- subset(Chick_Sal_ARA_mgKg, select = -MIC_TET)
shaps <- explain(rf_TET_2, X = X, pred_wrapper = pfun, nsim = 100, adjust = TRUE,
shap_only = FALSE)
system.time({
shaps <- explain(rf_TET_2, X = X, pred_wrapper = pfun, nsim = 100,
adjust = TRUE, shap_only = FALSE)
})
gc()
#Changing the STR variable to binary
Chick_Sal_ARA_mgKg_STR[,23] <- as.character(Chick_Sal_ARA_mgKg_STR[,23])
for(i in 1:nrow(Chick_Sal_ARA_mgKg_STR)){
if(Chick_Sal_ARA_mgKg_STR[i,23]=='32'){Chick_Sal_ARA_mgKg_STR[i,23]<-'<=32'}
}
for(i in 1:nrow(Chick_Sal_ARA_mgKg_STR)){
if(Chick_Sal_ARA_mgKg_STR[i,23]=='>64'||Chick_Sal_ARA_mgKg_STR[i,23]=='64'){Chick_Sal_ARA_mgKg_STR[i,23]<-'>=64'}
else Chick_Sal_ARA_mgKg_STR[i,23]<-'<=32'
}
Chick_Sal_ARA_mgKg_STR[,23] <- as.factor(Chick_Sal_ARA_mgKg_STR[,23])
levels(Chick_Sal_ARA_mgKg_STR[,23])
ind <- sample(2, nrow(Chick_Sal_ARA_mgKg_STR), replace = T,prob = c(.7,.3))
train_STR <- Chick_Sal_ARA_mgKg_STR[ind==1,]
test_STR <- Chick_Sal_ARA_mgKg_STR[ind==2,]
#Binary
n <- 10
STR_Bi_MDAs <- matrix(NA, nrow = 55, ncol = n)
STR_Bi_MDGs <- matrix(NA, nrow = 55, ncol = n)
STR_Bi_Accs <- rep(NA, n)
STR_Bi_Sens <- rep(NA, n)
STR_Bi_Specs <- rep(NA, n)
for(i in 1:n){
rf_STR_2 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg_STR)[23],
"~",paste(colnames(Chick_Sal_ARA_mgKg)[c(1:22,24:56)],
collapse = "+"),sep = "")),
data = train_STR, ntree=1000,keep.forest=T,importance=T)
STR_Bi_MDAs[,i] <- importance(rf_STR_2,type = 1)[,1]
STR_Bi_MDGs[,i] <- importance(rf_STR_2, type = 2)[,1]
STR_2_preds <- predict(rf_STR_2, newdata = test_STR)
STR_Bi_Accs[i] <- confusionMatrix(test_STR[,23],STR_2_preds)$overall[1]
STR_Bi_Sens[i] <- confusionMatrix(test_STR[,23],STR_2_preds)$overall[2]
STR_Bi_Specs[i] <- confusionMatrix(test_STR[,23],STR_2_preds)$overall[3]
}
library(caret)
library(ranger)
library(e1071)
library(randomForest)
library(mlbench)
for(i in 1:n){
rf_STR_2 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg_STR)[23],
"~",paste(colnames(Chick_Sal_ARA_mgKg)[c(1:22,24:56)],
collapse = "+"),sep = "")),
data = train_STR, ntree=1000,keep.forest=T,importance=T)
STR_Bi_MDAs[,i] <- importance(rf_STR_2,type = 1)[,1]
STR_Bi_MDGs[,i] <- importance(rf_STR_2, type = 2)[,1]
STR_2_preds <- predict(rf_STR_2, newdata = test_STR)
STR_Bi_Accs[i] <- confusionMatrix(test_STR[,23],STR_2_preds)$overall[1]
STR_Bi_Sens[i] <- confusionMatrix(test_STR[,23],STR_2_preds)$overall[2]
STR_Bi_Specs[i] <- confusionMatrix(test_STR[,23],STR_2_preds)$overall[3]
}
mean(STR_Bi_Accs)
mean(STR_Bi_Sens)
mean(STR_Bi_Specs)
View(Chick_Sal_ARA_mgKg)
#Binary
n <- 10
STR_Bi_MDAs <- matrix(NA, nrow = 55, ncol = n)
STR_Bi_MDGs <- matrix(NA, nrow = 55, ncol = n)
STR_Bi_Accs <- rep(NA, n)
STR_Bi_Sens <- rep(NA, n)
STR_Bi_Specs <- rep(NA, n)
for(i in 1:n){
rf_STR_2 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg_STR)[23],
"~",paste(colnames(Chick_Sal_ARA_mgKg)[c(1:22,24:65)],
collapse = "+"),sep = "")),
data = train_STR, ntree=1000,keep.forest=T,importance=T)
STR_Bi_MDAs[,i] <- importance(rf_STR_2,type = 1)[,1]
STR_Bi_MDGs[,i] <- importance(rf_STR_2, type = 2)[,1]
STR_2_preds <- predict(rf_STR_2, newdata = test_STR)
STR_Bi_Accs[i] <- confusionMatrix(test_STR[,23],STR_2_preds)$overall[1]
STR_Bi_Sens[i] <- confusionMatrix(test_STR[,23],STR_2_preds)$overall[2]
STR_Bi_Specs[i] <- confusionMatrix(test_STR[,23],STR_2_preds)$overall[3]
}
Chick_Sal_ARA_mgKg <- read.csv("Chick_Sal_ARA_mgKg.csv", row.names=1)
#Cleaning Region Names
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,3] == 'ALBERTA'){Chick_Sal_ARA_mgKg[i,3] <- 'Alberta'}
if(Chick_Sal_ARA_mgKg[i,3] == 'BRITISH COLUMBIA'){Chick_Sal_ARA_mgKg[i,3] <- 'British Columbia'}
if(Chick_Sal_ARA_mgKg[i,3] == 'ONTARIO'){Chick_Sal_ARA_mgKg[i,3] <- 'Ontario'}
if(Chick_Sal_ARA_mgKg[i,3] == 'QUEBEC'){Chick_Sal_ARA_mgKg[i,3] <- 'Quebec'}
if(Chick_Sal_ARA_mgKg[i,3] == 'SASKATCHEWAN'){Chick_Sal_ARA_mgKg[i,3] <- 'Saskatchewan'}
}
#Finding which variables have too many NA's
nas<-rep(NA,ncol(Chick_Sal_ARA_mgKg))
for(i in 1:ncol(Chick_Sal_ARA_mgKg)){
nas[i] <- length(which)
}
colnames(Chick_Sal_ARA_mgKg)[c(14,17,20,66,39,65,47,7,10,51)]
Chick_Sal_ARA_mgKg <- Chick_Sal_ARA_mgKg[,-c(14,17,20,66,39,65,47,7,10,51)]
#########
#MIC_TET#
#########
#Fix Repeated Factor Levels of MIC_TET
Chick_Sal_ARA_mgKg[,25] <- as.factor(Chick_Sal_ARA_mgKg[,25])
levels(Chick_Sal_ARA_mgKg[,25])
Chick_Sal_ARA_mgKg[,25] <- as.character(Chick_Sal_ARA_mgKg[,25])
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,25] == '<= 4'){Chick_Sal_ARA_mgKg[i,25] <- '<=4'}
if(Chick_Sal_ARA_mgKg[i,25] == '> 32'){Chick_Sal_ARA_mgKg[i,25] <- '32'}
}
Chick_Sal_ARA_mgKg[,25] <- as.factor(Chick_Sal_ARA_mgKg[,25])
levels(Chick_Sal_ARA_mgKg[,25])
#Fix Repeated Factor Levels of MIC_SSS
Chick_Sal_ARA_mgKg[,22] <- as.factor(Chick_Sal_ARA_mgKg[,22])
levels(Chick_Sal_ARA_mgKg[,22])
Chick_Sal_ARA_mgKg[,22] <- as.character(Chick_Sal_ARA_mgKg[,22])
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,22] == '<= 16'){Chick_Sal_ARA_mgKg[i,22] <- '<=16'}
if(Chick_Sal_ARA_mgKg[i,22] == '> 256'){Chick_Sal_ARA_mgKg[i,22] <- '>256'}
}
Chick_Sal_ARA_mgKg[,22] <- as.factor(Chick_Sal_ARA_mgKg[,22])
levels(Chick_Sal_ARA_mgKg[,22])
#Let's start by narrowing down to 2 classes. <=8 vs >=16
Chick_Sal_ARA_mgKg[,25] <- as.character(Chick_Sal_ARA_mgKg[,25])
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,25] == '<= 4'||Chick_Sal_ARA_mgKg[i,25] =='<=4'||Chick_Sal_ARA_mgKg[i,25] =='8'){
Chick_Sal_ARA_mgKg[i,25] <- '<=8'
}
else Chick_Sal_ARA_mgKg[i,25] <- '>=16'
}
Chick_Sal_ARA_mgKg[,25] <- as.factor(Chick_Sal_ARA_mgKg[,25])
levels(Chick_Sal_ARA_mgKg[,25])
length(which(Chick_Sal_ARA_mgKg[,25]=='>=16'))
ind <- sample(2, nrow(Chick_Sal_ARA_mgKg), replace = T,prob = c(.7,.3))
train_TET <- Chick_Sal_ARA_mgKg[ind==1,]
test_TET <- Chick_Sal_ARA_mgKg[ind==2,]
#Binary
n <- 10
TET_Bi_MDAs <- matrix(NA, nrow = 54, ncol = n)
TET_Bi_MDGs <- matrix(NA, nrow = 54, ncol = n)
TET_Bi_Accs <- rep(NA, n)
TET_Bi_Sens <- rep(NA, n)
TET_Bi_Specs <- rep(NA, n)
nrow(importance(rf_TET_4,type=1))
for(i in 1:n){
rf_TET_2 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg)[25],
"~",paste(colnames(Chick_Sal_ARA_mgKg)[c(1:24,26:41,43:65)],
collapse = "+"),sep = "")),
data = train_TET, ntree=1000,keep.forest=T,importance=T)
TET_Bi_MDAs[,i] <- importance(rf_TET_2,type = 1)[,1]
TET_Bi_MDGs[,i] <- importance(rf_TET_2, type = 2)[,1]
TET_2_preds <- predict(rf_TET_2, newdata = test_TET)
TET_Bi_Accs[i] <- confusionMatrix(test_TET[,25],TET_2_preds)$overall[1]
TET_Bi_Sens[i] <- confusionMatrix(test_TET[,25],TET_2_preds)$overall[2]
TET_Bi_Specs[i] <- confusionMatrix(test_TET[,25],TET_2_preds)$overall[3]
}
nrow(importance(rf_TET_2,type=1))
TET_Bi_MDAs <- matrix(NA, nrow = 63, ncol = n)
TET_Bi_MDGs <- matrix(NA, nrow = 63, ncol = n)
for(i in 1:n){
rf_TET_2 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg)[25],
"~",paste(colnames(Chick_Sal_ARA_mgKg)[c(1:24,26:41,43:65)],
collapse = "+"),sep = "")),
data = train_TET, ntree=1000,keep.forest=T,importance=T)
TET_Bi_MDAs[,i] <- importance(rf_TET_2,type = 1)[,1]
TET_Bi_MDGs[,i] <- importance(rf_TET_2, type = 2)[,1]
TET_2_preds <- predict(rf_TET_2, newdata = test_TET)
TET_Bi_Accs[i] <- confusionMatrix(test_TET[,25],TET_2_preds)$overall[1]
TET_Bi_Sens[i] <- confusionMatrix(test_TET[,25],TET_2_preds)$overall[2]
TET_Bi_Specs[i] <- confusionMatrix(test_TET[,25],TET_2_preds)$overall[3]
}
mean(TET_Bi_Accs)
mean(TET_Bi_Sens)
mean(TET_Bi_Specs)
TET_Bi_MDAs_avgs <- rep(NA, nrow(TET_Bi_MDAs))
for(i in 1:nrow(TET_Bi_MDAs)){
TET_Bi_MDAs_avgs[i] <- mean(TET_Bi_MDAs[i,])
}
TET_Bi_MDAs<-cbind(TET_Bi_MDAs,TET_Bi_MDAs_avgs)
rownames(TET_Bi_MDAs) <- rownames(importance(rf_TET_2,type = 1))
View(TET_Bi_MDAs)
TET_Bi_MDGs_avgs <- rep(NA, nrow(TET_Bi_MDGs))
for(i in 1:nrow(TET_Bi_MDGs)){
TET_Bi_MDGs_avgs[i] <- mean(TET_Bi_MDGs[i,])
}
TET_Bi_MDGs<-cbind(TET_Bi_MDGs,TET_Bi_MDGs_avgs)
rownames(TET_Bi_MDGs) <- rownames(importance(rf_TET_2,type = 2))
View(TET_Bi_MDGs)
################################################################################
#Multi-class
n <- 10
TET_MC_MDAs <- matrix(NA, nrow = 63, ncol = n)
TET_MC_MDGs <- matrix(NA, nrow = 63, ncol = n)
TET_MC_Accs <- rep(NA, n)
for(i in 1:n){
rf_TET_4 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg_TET)[25],
"~",paste(colnames(Chick_Sal_ARA_mgKg_TET)[c(1:24,26:41,43:65)],
collapse = "+"),sep = "")),
data = train_TET_4, ntree=1000,keep.forest=T,importance=T)
TET_MC_MDAs[,i] <- importance(rf_TET_4,type = 1)[,1]
TET_MC_MDGs[,i] <- importance(rf_TET_4, type = 2)[,1]
TET_4_preds <- predict(rf_TET_4, newdata = test_TET_4)
TET_MC_Accs[i] <- confusionMatrix(test_TET_4[,25],TET_4_preds)$overall[1]
}
mean(TET_MC_Accs)
TET_MC_MDAs_avgs <- rep(NA, nrow(TET_MC_MDAs))
for(i in 1:nrow(TET_MC_MDAs)){
TET_MC_MDAs_avgs[i] <- mean(TET_MC_MDAs[i,])
}
TET_MC_MDAs<-cbind(TET_MC_MDAs,TET_MC_MDAs_avgs)
rownames(TET_MC_MDAs) <- rownames(importance(rf_TET_4,type = 1))
View(TET_MC_MDAs)
Chick_Sal_ARA_mgKg <- read.csv("Chick_Sal_ARA_mgKg.csv", row.names=1)
#Cleaning Region Names
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,3] == 'ALBERTA'){Chick_Sal_ARA_mgKg[i,3] <- 'Alberta'}
if(Chick_Sal_ARA_mgKg[i,3] == 'BRITISH COLUMBIA'){Chick_Sal_ARA_mgKg[i,3] <- 'British Columbia'}
if(Chick_Sal_ARA_mgKg[i,3] == 'ONTARIO'){Chick_Sal_ARA_mgKg[i,3] <- 'Ontario'}
if(Chick_Sal_ARA_mgKg[i,3] == 'QUEBEC'){Chick_Sal_ARA_mgKg[i,3] <- 'Quebec'}
if(Chick_Sal_ARA_mgKg[i,3] == 'SASKATCHEWAN'){Chick_Sal_ARA_mgKg[i,3] <- 'Saskatchewan'}
}
#Finding which variables have too many NA's
nas<-rep(NA,ncol(Chick_Sal_ARA_mgKg))
for(i in 1:ncol(Chick_Sal_ARA_mgKg)){
nas[i] <- length(which)
}
colnames(Chick_Sal_ARA_mgKg)[c(14,17,20,66,39,65,47,7,10,51)]
Chick_Sal_ARA_mgKg <- Chick_Sal_ARA_mgKg[,-c(14,17,20,66,39,65,47,7,10,51)]
#########
#MIC_TET#
#########
#Fix Repeated Factor Levels of MIC_TET
Chick_Sal_ARA_mgKg[,25] <- as.factor(Chick_Sal_ARA_mgKg[,25])
levels(Chick_Sal_ARA_mgKg[,25])
Chick_Sal_ARA_mgKg[,25] <- as.character(Chick_Sal_ARA_mgKg[,25])
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,25] == '<= 4'){Chick_Sal_ARA_mgKg[i,25] <- '<=4'}
if(Chick_Sal_ARA_mgKg[i,25] == '> 32'){Chick_Sal_ARA_mgKg[i,25] <- '32'}
}
Chick_Sal_ARA_mgKg[,25] <- as.factor(Chick_Sal_ARA_mgKg[,25])
levels(Chick_Sal_ARA_mgKg[,25])
#Fix Repeated Factor Levels of MIC_SSS
Chick_Sal_ARA_mgKg[,22] <- as.factor(Chick_Sal_ARA_mgKg[,22])
levels(Chick_Sal_ARA_mgKg[,22])
Chick_Sal_ARA_mgKg[,22] <- as.character(Chick_Sal_ARA_mgKg[,22])
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,22] == '<= 16'){Chick_Sal_ARA_mgKg[i,22] <- '<=16'}
if(Chick_Sal_ARA_mgKg[i,22] == '> 256'){Chick_Sal_ARA_mgKg[i,22] <- '>256'}
}
Chick_Sal_ARA_mgKg[,22] <- as.factor(Chick_Sal_ARA_mgKg[,22])
levels(Chick_Sal_ARA_mgKg[,22])
#########
#MIC_STR#
#########
Chick_Sal_ARA_mgKg[,23] <- as.factor(Chick_Sal_ARA_mgKg[,23])
levels(Chick_Sal_ARA_mgKg[,23])
Chick_Sal_ARA_mgKg[,23] <- as.character(Chick_Sal_ARA_mgKg[,23])
which(Chick_Sal_ARA_mgKg[,23] == '')
Chick_Sal_ARA_mgKg_STR <- Chick_Sal_ARA_mgKg[-which(Chick_Sal_ARA_mgKg[,23] == ''),]
nrow(Chick_Sal_ARA_mgKg_STR)
Chick_Sal_ARA_mgKg_STR[,23] <- as.factor(Chick_Sal_ARA_mgKg_STR[,23])
levels(Chick_Sal_ARA_mgKg_STR[,23])
#MultiClass
n <- 10
STR_MC_MDAs <- matrix(NA, nrow = 64, ncol = n)
STR_MC_MDGs <- matrix(NA, nrow = 64, ncol = n)
STR_MC_Accs <- rep(NA, n)
STR_MC_Sens <- rep(NA, n)
STR_MC_Specs <- rep(NA, n)
for(i in 1:n){
rf_STR_8 <- randomForest(as.formula(paste(colnames(Chick_Sal_ARA_mgKg_STR)[23],
"~",paste(colnames(Chick_Sal_ARA_mgKg)[c(1:22,24:65)],
collapse = "+"),sep = "")),
data = train_STR, ntree=1000,keep.forest=T,importance=T)
STR_MC_MDAs[,i] <- importance(rf_STR_8,type = 1)[,1]
STR_MC_MDGs[,i] <- importance(rf_STR_8, type = 2)[,1]
STR_8_preds <- predict(rf_STR_8, newdata = test_STR)
STR_MC_Accs[i] <- confusionMatrix(test_STR[,23],STR_8_preds)$overall[1]
}
mean(STR_MC_Accs)
mean(STR_MC_Sens)
mean(STR_MC_Specs)
STR_MC_MDAs_avgs <- rep(NA, nrow(STR_MC_MDAs))
for(i in 1:nrow(STR_MC_MDAs)){
STR_MC_MDAs_avgs[i] <- mean(STR_MC_MDAs[i,])
}
STR_MC_MDAs<-cbind(STR_MC_MDAs,STR_MC_MDAs_avgs)
rownames(STR_MC_MDAs) <- rownames(importance(rf_STR_8,type = 1))
View(STR_MC_MDAs)
STR_MC_MDGs_avgs <- rep(NA, nrow(STR_MC_MDGs))
for(i in 1:nrow(STR_MC_MDGs)){
STR_MC_MDGs_avgs[i] <- mean(STR_MC_MDGs[i,])
}
STR_MC_MDGs<-cbind(STR_MC_MDGs,STR_MC_MDGs_avgs)
rownames(STR_MC_MDGs) <- rownames(importance(rf_STR_8,type = 2))
View(STR_MC_MDGs)
library(caret)
library(ranger)
library(e1071)
library(randomForest)
library(mlbench)
Chick_Sal_ARA_mgKg <- read.csv("Chick_Sal_ARA_mgKg.csv", row.names=1)
#Cleaning Region Names
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,3] == 'ALBERTA'){Chick_Sal_ARA_mgKg[i,3] <- 'Alberta'}
if(Chick_Sal_ARA_mgKg[i,3] == 'BRITISH COLUMBIA'){Chick_Sal_ARA_mgKg[i,3] <- 'British Columbia'}
if(Chick_Sal_ARA_mgKg[i,3] == 'ONTARIO'){Chick_Sal_ARA_mgKg[i,3] <- 'Ontario'}
if(Chick_Sal_ARA_mgKg[i,3] == 'QUEBEC'){Chick_Sal_ARA_mgKg[i,3] <- 'Quebec'}
if(Chick_Sal_ARA_mgKg[i,3] == 'SASKATCHEWAN'){Chick_Sal_ARA_mgKg[i,3] <- 'Saskatchewan'}
}
#Finding which variables have too many NA's
nas<-rep(NA,ncol(Chick_Sal_ARA_mgKg))
for(i in 1:ncol(Chick_Sal_ARA_mgKg)){
nas[i] <- length(which)
}
for(i in 1:ncol(Chick_Sal_ARA_mgKg)){
nas[i] <- length(is.na(Chick_Sal_ARA_mgKg[,i]))
}
for(i in 1:ncol(Chick_Sal_ARA_mgKg)){
nas[i] <- length(which(Chick_Sal_ARA_mgKg[,i]==NA))
}
View(nas)
nas[i] <- length(which(is.na(Chick_Sal_ARA_mgKg[,i])))
for(i in 1:ncol(Chick_Sal_ARA_mgKg)){
nas[i] <- length(which(is.na(Chick_Sal_ARA_mgKg[,i])))
}
View(as.matrix(nas))
colnames(Chick_Sal_ARA_mgKg)[c(14,17,20,66,39,65,47)]
Chick_Sal_ARA_mgKg <- Chick_Sal_ARA_mgKg[,-c(14,17,20,66,39,65,47)]
View(Chick_Sal_ARA_mgKg)
#Removing Unnecessary 'C' Variables
Chick_Sal_ARA_mgKg <- Chick_Sal_ARA_mgKg[,-29:45]
#Removing Unnecessary 'C' Variables
Chick_Sal_ARA_mgKg <- Chick_Sal_ARA_mgKg[,-(29:45)]
#Removing Estab Num variable
Chick_Sal_ARA_mgKg <- Chick_Sal_ARA_mgKg[,-8]
Chick_Sal_Reduced <- read.csv("Chick_Sal_Reduced", row.names=1)
Chick_Sal_Reduced <- read.csv("Chick_Sal_Reduced.csv", row.names=1)
View(Chick_Sal_Reduced)
nas<-rep(NA,ncol(Chick_Sal_Reduced))
for(i in 1:ncol(Chick_Sal_Reduced)){
nas[i] <- length(which(is.na(Chick_Sal_Reduced[,i])))
}
View(as.matrix(nas))
Chick_Sal_Reduced <- Chick_Sal_Reduced[,-c(13,16,19,45,44)]
Chick_Sal_Reduced$MIC_STR <- as.character(Chick_Sal_Reduced$MIC_STR)
for(i in 1:nrow(Chick_Sal_Reduced)){
if(Chick_Sal_Reduced$MIC_STR[i] == '<= 4'||Chick_Sal_Reduced$MIC_STR[i] =='<=4'||Chick_Sal_Reduced$MIC_STR[i] =='8'){
Chick_Sal_Reduced$MIC_STR[i] <- '<=8'
}
else Chick_Sal_Reduced$MIC_STR[i] <- '>=16'
}
Chick_Sal_Reduced$MIC_STR <- as.factor(Chick_Sal_Reduced$MIC_STR)
levels(Chick_Sal_ARA_mgKg$MIC_STR)
Chick_Sal_Reduced$MIC_STR <- as.factor(Chick_Sal_Reduced$MIC_STR)
levels(Chick_Sal_ARA_mgKg$MIC_STR)
levels(Chick_Sal_Reduced$MIC_STR)
ind <- sample(2, nrow(Chick_Sal_Reduced), replace = T,prob = c(.7,.3))
train_TET <- Chick_Sal_Reduced[ind==1,]
test_TET <- Chick_Sal_Reduced[ind==2,]
#Load CSV with reduced features
Chick_Sal_Reduced <- read.csv("Chick_Sal_Reduced.csv", row.names=1)
nas<-rep(NA,ncol(Chick_Sal_Reduced))
for(i in 1:ncol(Chick_Sal_Reduced)){
nas[i] <- length(which(is.na(Chick_Sal_Reduced[,i])))
}
View(as.matrix(nas))
Chick_Sal_Reduced <- Chick_Sal_Reduced[,-c(13,16,19,45,44)]
Chick_Sal_Reduced$MIC_TET <- as.character(Chick_Sal_Reduced$MIC_TET)
for(i in 1:nrow(Chick_Sal_Reduced)){
if(Chick_Sal_Reduced$MIC_TET[i] == '<= 4'||Chick_Sal_Reduced$MIC_TET[i] =='<=4'||Chick_Sal_Reduced$MIC_TET[i] =='8'){
Chick_Sal_Reduced$MIC_TET[i] <- '<=8'
}
else Chick_Sal_Reduced$MIC_TET[i] <- '>=16'
}
Chick_Sal_Reduced$MIC_STR <- as.factor(Chick_Sal_Reduced$MIC_STR)
Chick_Sal_Reduced$MIC_TET <- as.factor(Chick_Sal_Reduced$MIC_TET)
levels(Chick_Sal_Reduced$MIC_TET)
ind <- sample(2, nrow(Chick_Sal_Reduced), replace = T,prob = c(.7,.3))
train_TET <- Chick_Sal_Reduced[ind==1,]
test_TET <- Chick_Sal_Reduced[ind==2,]
rf_TET_2 <- randomForest(as.formula(paste(colnames(Chick_Sal_Reduced)[26],
"~",paste(colnames(Chick_Sal_Reduced)[c(1:25,27:49)],
collapse = "+"),sep = "")),
data = train_TET, ntree=1000,keep.forest=T,importance=T)
#Load CSV with reduced features
Chick_Sal_Reduced <- read.csv("Chick_Sal_Reduced.csv", row.names=1)
nas<-rep(NA,ncol(Chick_Sal_Reduced))
for(i in 1:ncol(Chick_Sal_Reduced)){
nas[i] <- length(which(is.na(Chick_Sal_Reduced[,i])))
}
View(as.matrix(nas))
Chick_Sal_Reduced <- Chick_Sal_Reduced[,-c(13,16,19,45,44)]
Chick_Sal_Reduced$MIC_TET <- as.character(Chick_Sal_Reduced$MIC_TET)
for(i in 1:nrow(Chick_Sal_Reduced)){
if(Chick_Sal_Reduced$MIC_TET[i] == '<= 4'||Chick_Sal_Reduced$MIC_TET[i] =='<=4'||Chick_Sal_Reduced$MIC_TET[i] =='8'){
Chick_Sal_Reduced$MIC_TET[i] <- '<=8'
}
else Chick_Sal_Reduced$MIC_TET[i] <- '>=16'
}
Chick_Sal_Reduced$MIC_TET <- as.factor(Chick_Sal_Reduced$MIC_TET)
levels(Chick_Sal_Reduced$MIC_TET)
ind <- sample(2, nrow(Chick_Sal_Reduced), replace = T,prob = c(.7,.3))
train_TET <- Chick_Sal_Reduced[ind==1,]
test_TET <- Chick_Sal_Reduced[ind==2,]
rf_TET_2 <- randomForest(as.formula(paste(colnames(Chick_Sal_Reduced)[26],
"~",paste(colnames(Chick_Sal_Reduced)[c(1:25,27:49)],
collapse = "+"),sep = "")),
data = train_TET, ntree=1000,keep.forest=T,importance=T)
rf_TET_2 <- randomForest(as.formula(paste(colnames(Chick_Sal_Reduced)[26],
)
)
))
rf_TET_2 <- randomForest(as.formula(paste(colnames(Chick_Sal_Reduced)[26],
"~",paste(colnames(Chick_Sal_Reduced)[c(1:25,27:49)],
collapse = "+"),sep = "")),
data = train_TET, ntree=1000,keep.forest=T,importance=T,
na.action = na.roughfix)
rf_TET_2 <- randomForest(as.formula(paste(colnames(Chick_Sal_Reduced)[26],
"~",paste(colnames(Chick_Sal_Reduced)[c(1:25,27:49)],
collapse = "+"),sep = "")),
data = train_TET, ntree=1000,keep.forest=T,importance=T,
na.action = na.omit)
importance(rf_TET_2,type = 1)
importance(rf_TET_2, type = 2)
nrow(importance(rf_TET_2, type = 2))
varImpPlot(rf_TET_2)
rf_TET_2$confusion
#Prediction with generated random forest
TET_2_preds <- predict(rf_TET_2, newdata = test_TET)
confusionMatrix(test_TET[,25],TET_2_preds)$overall[1]
confusionMatrix(test_TET[,26],TET_2_preds)$overall[1]
confusionMatrix(test_TET[,26],TET_2_preds)
Chick_Sal_ARA_mgKg <- read.csv("Chick_Sal_ARA_mgKg.csv", row.names=1)
#########
#MIC_STR#
#########
Chick_Sal_ARA_mgKg[,23] <- as.factor(Chick_Sal_ARA_mgKg[,23])
levels(Chick_Sal_ARA_mgKg[,23])
Chick_Sal_ARA_mgKg <- read.csv("Chick_Sal_ARA_mgKg.csv", row.names=1)
#Cleaning Region Names
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,3] == 'ALBERTA'){Chick_Sal_ARA_mgKg[i,3] <- 'Alberta'}
if(Chick_Sal_ARA_mgKg[i,3] == 'BRITISH COLUMBIA'){Chick_Sal_ARA_mgKg[i,3] <- 'British Columbia'}
if(Chick_Sal_ARA_mgKg[i,3] == 'ONTARIO'){Chick_Sal_ARA_mgKg[i,3] <- 'Ontario'}
if(Chick_Sal_ARA_mgKg[i,3] == 'QUEBEC'){Chick_Sal_ARA_mgKg[i,3] <- 'Quebec'}
if(Chick_Sal_ARA_mgKg[i,3] == 'SASKATCHEWAN'){Chick_Sal_ARA_mgKg[i,3] <- 'Saskatchewan'}
}
#Finding which variables have too many NA's
nas<-rep(NA,ncol(Chick_Sal_ARA_mgKg))
for(i in 1:ncol(Chick_Sal_ARA_mgKg)){
nas[i] <- length(which(is.na(Chick_Sal_ARA_mgKg[,i])))
}
View(as.matrix(nas))
colnames(Chick_Sal_ARA_mgKg)[c(14,17,20,66,39,65,47)]
Chick_Sal_ARA_mgKg <- Chick_Sal_ARA_mgKg[,-c(14,17,20,66,39,65,47)]
#########
#MIC_STR#
#########
Chick_Sal_ARA_mgKg[,23] <- as.factor(Chick_Sal_ARA_mgKg[,23])
levels(Chick_Sal_ARA_mgKg[,23])
Chick_Sal_ARA_mgKg <- read.csv("Chick_Sal_ARA_mgKg.csv", row.names=1)
#Cleaning Region Names
for(i in 1:nrow(Chick_Sal_ARA_mgKg)){
if(Chick_Sal_ARA_mgKg[i,3] == 'ALBERTA'){Chick_Sal_ARA_mgKg[i,3] <- 'Alberta'}
if(Chick_Sal_ARA_mgKg[i,3] == 'BRITISH COLUMBIA'){Chick_Sal_ARA_mgKg[i,3] <- 'British Columbia'}
if(Chick_Sal_ARA_mgKg[i,3] == 'ONTARIO'){Chick_Sal_ARA_mgKg[i,3] <- 'Ontario'}
if(Chick_Sal_ARA_mgKg[i,3] == 'QUEBEC'){Chick_Sal_ARA_mgKg[i,3] <- 'Quebec'}
if(Chick_Sal_ARA_mgKg[i,3] == 'SASKATCHEWAN'){Chick_Sal_ARA_mgKg[i,3] <- 'Saskatchewan'}
}
#Finding which variables have too many NA's
nas<-rep(NA,ncol(Chick_Sal_ARA_mgKg))
for(i in 1:ncol(Chick_Sal_ARA_mgKg)){
nas[i] <- length(which(is.na(Chick_Sal_ARA_mgKg[,i])))
}
View(as.matrix(nas))
colnames(Chick_Sal_ARA_mgKg)[c(14,17,20,66,39,65,47)]
Chick_Sal_ARA_mgKg <- Chick_Sal_ARA_mgKg[,-c(14,17,20,66,39,65,47)]
#Removing Unnecessary 'C' Variables
Chick_Sal_ARA_mgKg <- Chick_Sal_ARA_mgKg[,-(29:45)]
#Removing Estab Num variable
Chick_Sal_ARA_mgKg <- Chick_Sal_ARA_mgKg[,-8]
Chick_Sal_ARA_mgKg <- read.csv("Chick_Sal_ARA_mgKg.csv", row.names=1)
View(Chick_Sal_ARA_mgKg)
#########
#MIC_STR#
#########
Chick_Sal_ARA_mgKg[,28] <- as.factor(Chick_Sal_ARA_mgKg[,28])
levels(Chick_Sal_ARA_mgKg[,28])
length(which(Chick_Sal_ARA_mgKg[,28]==">64"))
length(which(Chick_Sal_ARA_mgKg[,28]=="64"))
